@page "{handler?}"
@model MangaWeb.Pages.ConversationModel
@{
}
<head>
    <style>
        .chat-box {
            width: 90%;
            min-height: 600px;
            overflow-y: scroll;
            padding: 10px;
            border: 1px solid gray;
            margin: 0 auto;
            display: block;
            max-height: 680px;
        }

        /* style for each message bubble */
        .message-bubble {
            color: rgb(240,240,240);
            font-size: 28px;
            font-weight: 600;
            padding: 10px;
            border-radius: 10px;
            margin-bottom: 20px;
            max-width: 60%;
            display: block;
            clear: both;
        }

            /* align messages to the right */
            .message-bubble.right {
                background-color: rgb(45,45,45);
                float: right;
            }

            .message-bubble.left {
                background-color: rgb(25,25,25);
                float: left;
            }

        .input-container {
            width: 90%;
            display: flex;
            justify-content: left;
            text-align: left;
            margin: 20px auto;
            position: relative;
        }

        .messageInput {
            color: rgb(240,240,240);
            font-size: 28px;
            font-weight: 600;
            width: 85%;
            background-color: rgb(40,40,40);
            margin-bottom: 7px;
            margin-right: 10px;
            margin-top: 3px;
        }

        .chat-box::-webkit-scrollbar {
            width: 15px;
        }

        .chat-box::-webkit-scrollbar-track {
            background-color: rgb(25,25,25);
            border-radius: 80px;
        }

        .chat-box::-webkit-scrollbar-thumb {
            background-color: rgb(55,55,55);
            border-radius: 80px;
        }

        .timeChat {
            display: inline;
            color: rgb(150,150,150);
            font-size: 14px;
        }

        .chat-head {
            width: 90%;
            display: flex;
            align-items: center;
            margin: 0 auto;
            padding: 10px;
            background-color: rgba(25,25,25,.2);
            border-bottom: 1px solid #ccc;
        }

            .chat-head img {
                width: 90px;
                height: 90px;
                border-radius: 50%;
                margin-right: 10px;
            }

        .user-name {
            font-size: 24px;
            font-weight: 600;
            margin: 0;
        }

    </style>

</head>
<body>
    <div class="chat-head">
        <img src="@Model.UserWriteToImageSrc" alt="User Avatar">
        <h3 class="user-name">@Model.UserWriteToName</h3>
        <span class="badge"></span>
    </div>

    <div class="chat-box">
        @if (Model.Conversation.Messages is not null)
        {
            @foreach (var message in Model.Conversation.Messages)
            {

                var IsCurrentUserAuthor = message.UserNameFrom == Model.CurrentUserName;

                <div id="@(message.IsViewed ? "" : "last-message")" class="message-bubble @(IsCurrentUserAuthor ? "right" : "left")"
             data-message-id="@message.Id"
             data-viewed="@message.IsViewed">
                    @message.Body
                    <div class="timeChat">@message.DateTime.ToShortTimeString() @message.DateTime.ToShortDateString()</div>
                    @if (IsCurrentUserAuthor)
                    {
                        <img style="height:20px;width:20px;opacity:.6;" src="@(message.IsViewed ? "/img/Viewed.png" : "/img/NotViewed.png")">
                    }
                </div>
            }
        }
    </div>

    <form method="post">
        <div class="input-container">
            <input id="userNameWriteTo" name="userNameWriteTo" hidden value="@(Model.Conversation.FirstUser.UserName == Model.CurrentUserName ? Model.Conversation.SecondUser.UserName : Model.Conversation.FirstUser.UserName)" />
            <input class="messageInput" type="text" id="message-input" name="messageInput" placeholder="@Model.Localizer["WriteMessage"]" />
            <input asp-page-handler="SendMessage" type="submit" class="send-button btn btn-lg btn-primary" value="@Model.Localizer["Send"]">
        </div>
    </form>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        var lastMessage = document.getElementById("last-message");
        lastMessage.scrollIntoView();
        var chatBox = document.querySelector(".chat-box");
        var messageBubbles = document.querySelectorAll(".message-bubble");

        function markNewMessages() {
            messageBubbles.forEach(function (bubble) {
                if (bubble.getAttribute("data-viewed") === "False") {
                    bubble.setAttribute("data-viewed", "True");
                    var messageId = bubble.getAttribute("data-message-id");
                    var userNameWriteTo = document.getElementById("userNameWriteTo").value;
                    $.ajax({
                        url: '?handler=MarkMessageAsViewed&messageId=' + messageId + '&userNameWriteTo=' + userNameWriteTo,
                        success: function (data) {
                            console.log(data);
                        },
                        error: function (error) {
                            console.log("Error: " + error);
                        }
                    });
                }
            });
        }

        // set message as viewed when user scrolls to it
        chatBox.addEventListener("scroll", function () {
            markNewMessages();
        });

        // call markNewMessages after loading new messages
        // example: if new messages are loaded using AJAX, call this function in the AJAX success callback
        markNewMessages();
        // helper function to check if an element is in view
        function isScrolledIntoView(element) {
            var rect = element.getBoundingClientRect();
            var elemTop = rect.top;
            var elemBottom = rect.bottom;
            var isVisible = elemTop < window.innerHeight && elemBottom >= 0;
            return isVisible;
        }
    </script>
</body>

